{"version":3,"file":"static/js/546.9409daec.chunk.js","mappings":"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","sources":["modules/CalendarToolbar/components/PeriodPaginator/PeriodPaginator.styled.jsx","modules/CalendarToolbar/components/PeriodPaginator/PeriodPaginator.jsx","modules/CalendarToolbar/components/PeriodTypeSelect/PeriodTypeSelect.styled.jsx","modules/CalendarToolbar/components/PeriodTypeSelect/PeriodTypeSelect.jsx","modules/CalendarToolbar/CalendarToolbar.styled.jsx","modules/CalendarToolbar/CalendarToolbar.jsx","pages/CalendarPage/CalendarPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const WrapperPeriodPaginator = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  @media (min-width: 768px) {\r\n    justify-content: flex-start;\r\n    gap: 8px;\r\n  }\r\n`;\r\n\r\nexport const Li = styled.li`\r\n  display: flex;\r\n\r\n  height: 30px;\r\n\r\n  @media (min-width: 768px) {\r\n    height: 36px;\r\n  }\r\n`;\r\nexport const Btn = styled.button`\r\n  padding: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 36px;\r\n\r\n  border: 1px solid rgba(220, 227, 229, 0.5);\r\n  background-color: ${props => props.theme.bcgTernary};\r\n  &:disabled {\r\n    background-color: ${props => props.theme.bcgTernary};\r\n\r\n    & svg {\r\n      stroke: ${props => props.theme.SvgDisabled};\r\n    }\r\n  }\r\n\r\n  &:first-of-type {\r\n    border-radius: 8px 0 0 8px;\r\n  }\r\n\r\n  &:last-child {\r\n    border-radius: 0 8px 8px 0;\r\n  }\r\n\r\n  & svg {\r\n    fill: transparent;\r\n    stroke: ${props => props.theme.SvgArowSecondary};\r\n  }\r\n  @media (min-width: 768px) {\r\n    width: 38px;\r\n  }\r\n`;\r\n\r\nexport const StyledDate = styled.p`\r\n  display: inline-block;\r\n\r\n  font-weight: 700;\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n\r\n  padding: 6px 12px;\r\n\r\n  border-radius: 8px;\r\n\r\n  background-color: #3e85f3;\r\n  color: #ffffff;\r\n\r\n  text-transform: uppercase;\r\n  text-align: center;\r\n  @media (min-width: 768px) {\r\n    font-size: 16px;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n`;\r\n","\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { format, parse, add, sub } from 'date-fns';\r\nimport { setDates } from 'redux/date/dateSlice';\r\nimport { selectDate } from 'redux/date/selectors';\r\nimport sprite from 'shared/icons/sprite.svg';\r\nimport {\r\n  Btn,\r\n  Li,\r\n  StyledDate,\r\n  WrapperPeriodPaginator,\r\n} from './PeriodPaginator.styled';\r\n\r\nexport const PeriodPaginator = ({ type }) => {\r\n  const params = useParams();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const normalizedDate = useSelector(selectDate);\r\n\r\n  useEffect(() => {\r\n    if (params.currentDay) {\r\n      if (normalizedDate !== params.currentDay) {\r\n        dispatch(setDates(params.currentDay));\r\n      }\r\n    }\r\n  }, [dispatch, normalizedDate, params.currentDay]);\r\n\r\n  const date = parse(normalizedDate, 'yyyy-MM-dd', Date.now());\r\n\r\n  const onChangeDate = e => {\r\n    if (e.currentTarget.name === 'addition') {\r\n      if (type === 'day') {\r\n        const newDate = add(date, { days: 1 });\r\n        const formattedNewDate = format(newDate, 'yyyy-MM-dd');\r\n        dispatch(setDates(formattedNewDate));\r\n        navigate(`${type}/${formattedNewDate}`);\r\n        return;\r\n      }\r\n      const newDate = add(date, { months: 1 });\r\n      const formattedNewDate = format(newDate, 'yyyy-MM-dd');\r\n      dispatch(setDates(formattedNewDate));\r\n      navigate(`${type}/${formattedNewDate}`);\r\n      return;\r\n    }\r\n    if (type === 'day') {\r\n      const newDate = sub(date, { days: 1 });\r\n      const formattedNewDate = format(newDate, 'yyyy-MM-dd');\r\n      dispatch(setDates(formattedNewDate));\r\n      navigate(`${type}/${formattedNewDate}`);\r\n      return;\r\n    }\r\n    const newDate = sub(date, { months: 1 });\r\n    const formattedNewDate = format(newDate, 'yyyy-MM-dd');\r\n    dispatch(setDates(formattedNewDate));\r\n    navigate(`${type}/${formattedNewDate}`);\r\n    return;\r\n  };\r\n\r\n  const currentDate = format(date, 'dd MMMM yyyy');\r\n\r\n  // const shouldDisable = date < Date.now();\r\n\r\n  return (\r\n    <WrapperPeriodPaginator>\r\n      <StyledDate>\r\n        {type === 'month' ? currentDate.slice(3) : currentDate}\r\n      </StyledDate>\r\n      <ul>\r\n        <Li>\r\n          <Btn\r\n            type=\"button\"\r\n            name=\"subtraction\"\r\n            onClick={onChangeDate}\r\n            // disabled={shouldDisable}\r\n          >\r\n            <svg height={'10px'} width={'8px'}>\r\n              <use href={`${sprite}#icon-arrow-left-small`} />\r\n            </svg>\r\n          </Btn>\r\n          <Btn type=\"button\" name=\"addition\" onClick={onChangeDate}>\r\n            <svg height={'10px'} width={'8px'}>\r\n              <use href={`${sprite}#icon-arrow-right-small`} />\r\n            </svg>\r\n          </Btn>\r\n        </Li>\r\n      </ul>\r\n    </WrapperPeriodPaginator>\r\n  );\r\n};\r\n","import styled from '@emotion/styled';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const List = styled.ul`\r\n  display: flex;\r\n  margin-top: 18px;\r\n\r\n  @media (min-width: 768px) {\r\n    margin-top: 0;\r\n  }\r\n`;\r\nexport const Item = styled.li`\r\n  font-weight: 500;\r\n  font-size: 14px;\r\n  line-height: 18px;\r\n\r\n  display: flex;\r\n`;\r\nexport const StyledNavLink = styled(NavLink)`\r\n  color: ${props => props.theme.activeText};\r\n\r\n  background-color: ${props => props.theme.PeriodTypeSelect};\r\n\r\n  &.active {\r\n    background-color: ${props => props.theme.PeriodTypeSelectDisabled};\r\n  }\r\n  &.month {\r\n    padding: 8px 16px;\r\n    border-radius: 8px 0 0 8px;\r\n  }\r\n  &.day {\r\n    padding: 8px 25px;\r\n    border-radius: 0 8px 8px 0;\r\n  }\r\n\r\n  @media (min-width: 768px) {\r\n    &.day {\r\n      padding: 8px 26px;\r\n    }\r\n  }\r\n\r\n  @media (min-width: 768px) {\r\n    font-size: 16px;\r\n  }\r\n`;\r\n","import { useSelector } from 'react-redux';\r\nimport { selectDate } from 'redux/date/selectors';\r\nimport { Item, List, StyledNavLink } from './PeriodTypeSelect.styled';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nexport const PeriodTypeSelect = ({ onChangeType }) => {\r\n  const date = useSelector(selectDate);\r\n\r\n  const location = useLocation();\r\n  const isMonthRoute = location.pathname.includes('month');\r\n  const isDayRoute = location.pathname.includes('day');\r\n\r\n  return (\r\n    <List>\r\n      <Item>\r\n        <StyledNavLink\r\n          className={`${isMonthRoute ? 'active' : ''} month`}\r\n          to={`month/${date}`}\r\n          onClick={() => onChangeType('month')}\r\n        >\r\n          Month\r\n        </StyledNavLink>\r\n      </Item>\r\n      <Item>\r\n        <StyledNavLink\r\n          className={`${isDayRoute ? 'active' : ''} day`}\r\n          to={`day/${date}`}\r\n          onClick={() => onChangeType('day')}\r\n        >\r\n          Day\r\n        </StyledNavLink>\r\n      </Item>\r\n    </List>\r\n  );\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const CalendarToolbarWrapper = styled.div`\r\n  margin-bottom: 24px;\r\n\r\n  @media (min-width: 768px) {\r\n    margin-bottom: 32px;\r\n\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n`;\r\n","import { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { format, parse } from 'date-fns';\r\nimport { useGetTasksByMonthQuery } from 'redux/tasks/tasksApi';\r\nimport { setTasks } from 'redux/tasks/tasksSlice';\r\nimport { selectDate } from 'redux/date/selectors';\r\nimport { PeriodPaginator } from './components/PeriodPaginator/PeriodPaginator';\r\nimport { PeriodTypeSelect } from './components/PeriodTypeSelect/PeriodTypeSelect';\r\nimport { CalendarToolbarWrapper } from './CalendarToolbar.styled';\r\n\r\nexport const CalendarToolbar = () => {\r\n  const [type, setType] = useState('month');\r\n\r\n  const location = useLocation();\r\n\r\n  const pathname = location.pathname.slice(0, -11);\r\n\r\n  useEffect(() => {\r\n    if (pathname === '/calendar/day') {\r\n      setType('day');\r\n      return;\r\n    }\r\n    setType('month');\r\n  }, [pathname]);\r\n\r\n  const normalizedDate = useSelector(selectDate);\r\n\r\n  const date = parse(normalizedDate, 'yyyy-MM-dd', Date.now());\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { data } = useGetTasksByMonthQuery({\r\n    year: format(date, 'yyyy'),\r\n    month: format(date, 'MM'),\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(setTasks(data));\r\n  }, [dispatch, data]);\r\n\r\n  return (\r\n    <CalendarToolbarWrapper>\r\n      <PeriodPaginator type={type} />\r\n      <PeriodTypeSelect onChangeType={setType} />\r\n    </CalendarToolbarWrapper>\r\n  );\r\n};\r\n","import { CalendarToolbar } from 'modules/CalendarToolbar/CalendarToolbar';\r\nimport { Suspense } from 'react';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { Outlet } from 'react-router-dom';\r\nimport { Loader } from 'shared/components/Loader/Loader';\r\n\r\nexport default function CalendarPage() {\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>Calendar</title>\r\n      </Helmet>\r\n      <CalendarToolbar />\r\n      <Suspense fallback={<Loader />}>\r\n        <Outlet />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["WrapperPeriodPaginator","styled","Li","Btn","props","theme","bcgTernary","SvgDisabled","SvgArowSecondary","StyledDate","PeriodPaginator","type","params","useParams","dispatch","useDispatch","navigate","useNavigate","normalizedDate","useSelector","selectDate","useEffect","currentDay","setDates","date","parse","Date","now","onChangeDate","e","currentTarget","name","newDate","add","days","formattedNewDate","format","months","sub","currentDate","slice","onClick","height","width","href","sprite","List","Item","StyledNavLink","NavLink","activeText","PeriodTypeSelect","PeriodTypeSelectDisabled","onChangeType","location","useLocation","isMonthRoute","pathname","includes","isDayRoute","className","to","CalendarToolbarWrapper","CalendarToolbar","useState","setType","data","useGetTasksByMonthQuery","year","month","setTasks","CalendarPage","Suspense","fallback","Loader"],"sourceRoot":""}