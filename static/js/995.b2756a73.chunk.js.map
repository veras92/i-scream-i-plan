{"version":3,"file":"static/js/995.b2756a73.chunk.js","mappings":"wQAGaA,EAAqBC,EAAAA,KAAaC,MAAM,CACnDC,KAAMF,EAAAA,KACHG,SAAS,0BACTC,QACCC,EAAAA,GACA,0IAEDC,IAAI,GAAI,uCACXC,MAAOP,EAAAA,KACJO,MAAM,wBACNJ,SAAS,0BACZK,SAAUR,EAAAA,KACPG,SAAS,0BACTC,QACCK,EAAAA,GACA,2G,8BChBOC,EAAqB,CAChC,CACEC,UAAW,OACXC,KAAM,OACNC,IAAIC,EAAAA,EAAAA,MACJC,MAAO,OACPC,YAAa,mBAEf,CACEL,UAAW,QACXC,KAAM,QACNC,IAAIC,EAAAA,EAAAA,MACJC,MAAO,QACPC,YAAa,eAEf,CACEL,UAAW,WACXC,KAAM,WACNC,IAAIC,EAAAA,EAAAA,MACJC,MAAO,WACPC,YAAa,mB,mKCpBV,IAAMC,GAAO,0jBAuBPC,GAAa,2bAgCbC,GAAI,+OAiBJC,GAAS,qRAcTC,GAAG,sVAoBHC,GAAM,gYAsBPD,EAtBO,gFA2BNE,GAAQ,uN,mBCpGfC,GAAgBC,EAAAA,EAAAA,GAAiBf,GAE1BgB,EAAe,WAC1B,OAAuCC,EAAAA,EAAAA,MAAvC,eAAOC,EAAP,YAAmBC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,OAE5BC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACVF,IAASG,EAAAA,EAAAA,IAAY,OAALF,QAAK,IAALA,GAAA,UAAAA,EAAOG,YAAP,eAAaC,UAAW,8BAC7C,GAAE,CAACJ,EAAOD,IAEX,OAKIM,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYtC,GACtByB,cAAAA,IANUc,EADZ,EACEV,SACAW,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAWf,OACE,SAACxB,EAAD,WACE,UAACC,EAAD,YACE,UAACC,EAAD,CAAMwB,SAAUJ,GARL,SAAAN,GACfL,EAASK,GACTO,GACD,IAK6CI,aAAa,QAArD,WACE,SAACxB,EAAD,sBACCV,EAAmBmC,KAAI,SAAAC,GAAK,OAC3B,SAAC,KAAD,kBAEMA,GAFN,IAGElB,SAAUU,EACVG,OAAQA,IAHHK,EAAMjC,GAFc,KAQ7B,UAACS,EAAD,CAAQV,KAAK,SAAb,WACE,uCACA,SAACS,EAAD,CAAK0B,MAAM,KAAKC,OAAO,KAAvB,UACE,gBAAKC,KAAI,UAAKC,EAAAA,EAAL,2BAIf,SAACC,EAAA,EAAD,CAAcC,MAAOC,EAAAA,GAAAA,MAAcC,QAAQ,YAC3C,SAAC/B,EAAD,CACEgC,OAAM,UAAKC,EAAL,gBAA0BC,EAA1B,OACNC,IAAG,UAAKF,GACRG,IAAI,cAKb,E,UC/Ec,SAASC,IACtB,OACE,4BACE,SAAC,KAAD,WACE,0CAEF,SAAClC,EAAD,MAGL,C,8ECbYyB,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOE,EAAV,EAAUA,QAAV,OAC1B,SAAC,KAAD,CAAMO,GAAIT,EAAV,SAAkBE,GADQ,C,+ECLf7B,EAAmB,SAAAqC,GAAG,OACjCA,EAAIC,QACF,SAACC,EAAKC,GAAN,eAAC,UACID,GADL,cAEGC,EAAKtD,UAAY,IAFpB,GAIA,CAAC,EAN8B,C,wGCA5B,IAAMN,EAAa,IAAI6D,OAC5B,0HAIWzD,EAAiB,wCAGjB0D,EACX,iF","sources":["modules/RegisterForm/registerFormSchema.js","modules/RegisterForm/registerFormInputs.js","modules/RegisterForm/RegisterForm.styled.jsx","modules/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx","shared/components/AuthNavigate/AuthNavigate.jsx","shared/utils/getDefaultValues.js","shared/validation/regExps.js"],"sourcesContent":["import { nameRegExp, passwordRegExp } from 'shared/validation/regExps';\nimport * as Yup from 'yup';\n\nexport const registerFormSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('This field is required')\n    .matches(\n      nameRegExp,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .max(16, 'Name may contain only 16 characters'),\n  email: Yup.string()\n    .email('Invalid email format')\n    .required('This field is required'),\n  password: Yup.string()\n    .required('This field is required')\n    .matches(\n      passwordRegExp,\n      'Password must contain minimum 8 characters, 1 upper case letter, 1 lower case letter, 1 numeric digit'\n    ),\n});\n","import { nanoid } from '@reduxjs/toolkit';\n\nexport const registerFormInputs = [\n  {\n    inputName: 'name',\n    type: 'text',\n    id: nanoid(),\n    label: 'Name',\n    placeholder: 'Enter your name',\n  },\n  {\n    inputName: 'email',\n    type: 'email',\n    id: nanoid(),\n    label: 'Email',\n    placeholder: 'Enter email',\n  },\n  {\n    inputName: 'password',\n    type: 'password',\n    id: nanoid(),\n    label: 'Password',\n    placeholder: 'Enter password',\n  },\n];\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const Wrapper = styled.div`\r\n  height: 100vh;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  padding: 1.25rem;\r\n\r\n  background-color: #dcebf7;\r\n\r\n  @media screen and (min-width: 1200px) {\r\n    background: url(../../shared/images/GooseImg/goose-rocket/goose-rocket.png),\r\n      url(), #dcebf7;\r\n    background-repeat: no-repeat;\r\n    background-position-x: calc(50% + (480px / 2) + (368px / 2) + 52px),\r\n      calc(50% + (480px / 2) + (207px / 2) + 156px);\r\n    background-position-y: calc(50% + 212px - 66px),\r\n      calc(50% + 212px - 66px - (717px / 2) + (174px / 2) + 76px);\r\n  }\r\n`;\r\n\r\nexport const FormContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  width: 100%;\r\n  max-width: 480px;\r\n\r\n  & > a {\r\n    position: relative;\r\n    display: block;\r\n    font-family: 'Inter';\r\n    font-style: normal;\r\n    font-weight: 600;\r\n    font-size: 0.75rem;\r\n    line-height: 0.875rem;\r\n    color: var(--main-blue-color);\r\n\r\n    &:before {\r\n      position: absolute;\r\n      bottom: 0;\r\n      left: 0;\r\n\r\n      content: '';\r\n      width: 100%;\r\n      height: 1px;\r\n      background-color: var(--main-blue-color);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 24px;\r\n  width: 100%;\r\n\r\n  padding: 40px 24px;\r\n  margin-bottom: 1.125rem;\r\n\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n\r\n  @media (min-width: 576px) {\r\n    padding: 40px;\r\n  }\r\n`;\r\n\r\nexport const FormTitle = styled.div`\r\n  font-family: 'Inter';\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 1.125rem;\r\n  line-height: 1.5rem;\r\n\r\n  color: #3e85f3;\r\n  text-shadow: 0px 47px 355px rgba(0, 0, 0, 0.07),\r\n    0px 9.4px 57.6875px rgba(0, 0, 0, 0.035);\r\n\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nexport const Svg = styled.svg`\r\n  fill: transparent;\r\n  stroke: #ffffff;\r\n\r\n  @keyframes scale-up-hor-left {\r\n    0% {\r\n      -webkit-transform: scaleX(0.4);\r\n      transform: scaleX(0.4);\r\n      -webkit-transform-origin: 0% 0%;\r\n      transform-origin: 0% 0%;\r\n    }\r\n    100% {\r\n      -webkit-transform: scaleX(1);\r\n      transform: scaleX(1);\r\n      -webkit-transform-origin: 0% 0%;\r\n      transform-origin: 0% 0%;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  column-gap: 0.8125rem;\r\n  padding: 14px;\r\n  margin-top: 0.5rem;\r\n\r\n  background: #3e85f3;\r\n  box-shadow: 4px 2px 16px rgba(136, 165, 191, 0.48);\r\n  border-radius: 16px;\r\n\r\n  border: none;\r\n\r\n  font-family: 'Inter';\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 0.875rem;\r\n  line-height: 1.125rem;\r\n  letter-spacing: -0.02em;\r\n  color: #fff;\r\n\r\n  &:hover ${Svg} {\r\n    animation: scale-up-hor-left 0.7s cubic-bezier(0.39, 0.575, 0.565, 1) both;\r\n  }\r\n`;\r\n\r\nexport const GooseIMG = styled.img`\r\n  display: none;\r\n\r\n  @media (min-width: 1260px) {\r\n    position: fixed;\r\n    width: 400px;\r\n    height: 454px;\r\n    left: 10px;\r\n    bottom: 0;\r\n    display: block;\r\n  }\r\n  @media (min-width: 1360px) {\r\n    left: 50px;\r\n  }\r\n`;\r\n","// \"1. Компонент створює блок розмітки з формою та інпутами: name, email, password і кнопкою відправки форми.\r\n// 2. Інпути повинні бути реалізовані як контрольовані компоненти за допомогою бібліотеки formik/hook form\r\n// 3. По сабміту поля форми повинні проходити валідацію, (бібліотека yup) і в разі, негативного результату під відповітним інпутом підсвітити повідомлення помилки валідації.\r\n// 4. В разі успішної відповіді інформацію про користувача потрібно записати в глобальний стейт і виконати редірект на приватний маршрут /calendar/month.\r\n// 5. В разі помилки користувачу потрібно вивести відповідне пуш-повідомлення з помилкою\"\r\n\r\nimport { useEffect } from 'react';\r\nimport { useRegisterUserMutation } from 'redux/auth/authApi';\r\n\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { registerFormSchema } from './registerFormSchema';\r\nimport { getDefaultValues } from 'shared/utils/getDefaultValues';\r\n\r\nimport { FormFiled } from 'shared/components/FormFiled/FormField';\r\nimport { registerFormInputs } from './registerFormInputs';\r\n\r\nimport { AuthNavigate } from 'shared/components/AuthNavigate/AuthNavigate';\r\nimport { ROUTES } from 'shared/services/routes';\r\n\r\nimport GooseRegister from 'shared/images/GooseImg/goose-register/goose-register.png';\r\nimport GooseRegisterRetina from 'shared/images/GooseImg/goose-register/@2x/goose-register@2x.png';\r\n\r\nimport sprite from 'shared/icons/sprite.svg';\r\nimport {\r\n  Svg,\r\n  Wrapper,\r\n  FormContainer,\r\n  Form,\r\n  FormTitle,\r\n  Button,\r\n  GooseIMG,\r\n} from './RegisterForm.styled';\r\nimport { notify } from 'shared/utils/errorToast';\r\n\r\nconst defaultValues = getDefaultValues(registerFormInputs);\r\n\r\nexport const RegisterForm = () => {\r\n  const [register, { isError, error }] = useRegisterUserMutation();\r\n\r\n  useEffect(() => {\r\n    if (isError) notify(error?.data?.message || 'Sorry, something went wrong');\r\n  }, [error, isError]);\r\n\r\n  const {\r\n    register: reg,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(registerFormSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const onSubmit = data => {\r\n    register(data);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <FormContainer>\r\n        <Form onSubmit={handleSubmit(onSubmit)} autoComplete=\"false\">\r\n          <FormTitle>Sign Up</FormTitle>\r\n          {registerFormInputs.map(input => (\r\n            <FormFiled\r\n              key={input.id}\r\n              {...input}\r\n              register={reg}\r\n              errors={errors}\r\n            />\r\n          ))}\r\n          <Button type=\"submit\">\r\n            <span>Sign up</span>\r\n            <Svg width=\"20\" height=\"20\">\r\n              <use href={`${sprite}#icon-Log-in`} />\r\n            </Svg>\r\n          </Button>\r\n        </Form>\r\n        <AuthNavigate route={ROUTES.login} content=\"Log In\" />\r\n        <GooseIMG\r\n          srcset={`${GooseRegister} 1x, ${GooseRegisterRetina} 2x`}\r\n          src={`${GooseRegister}`}\r\n          alt=\"goose\"\r\n        />\r\n      </FormContainer>\r\n    </Wrapper>\r\n  );\r\n};\r\n","// \"Компонент рендериться на маршрут /register\r\n\r\n// 1. Сторінка повинна відображатись відповідно до макету на 3х розширеннях (375, 768, 1440), на ширині екрану до 375 блоки розмітки повинні тягнутись\r\n// 2. Сторінка рендерить компоненти:\r\n//  - RegisterForm - блок з формою реєстрації\r\n//  - AuthNavigate - загальний компонент навігації для сторінок login/register\"\r\nimport { RegisterForm } from 'modules/RegisterForm/RegisterForm';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nexport default function RegisterPage() {\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>Sign Up</title>\r\n      </Helmet>\r\n      <RegisterForm />\r\n    </div>\r\n  );\r\n}\r\n","// \"1. Компонент отримує пропсами маршрут для редіректу та текстовий контент\r\n// 2. Рендерить елемент навігації з відповідними налаштуваннями для редіректу на сторінки LoginPage/RegisterPage\"\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AuthNavigate = ({ route, content }) => (\r\n  <Link to={route}>{content}</Link>\r\n);\r\n\r\nAuthNavigate.propTypes = {\r\n  route: PropTypes.string.isRequired,\r\n  content: PropTypes.any.isRequired,\r\n};\r\n","export const getDefaultValues = arr =>\n  arr.reduce(\n    (acc, item) => ({\n      ...acc,\n      [item.inputName]: '',\n    }),\n    {}\n  );\n","export const nameRegExp = new RegExp(\n  \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n);\n// e.g. Olexa Dovbush\n\nexport const passwordRegExp = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\n// min 8 characters, 1 upper case letter, 1 lower case letter, 1 numeric digit.\n\nexport const phoneRegExp =\n  /^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/;\n// +380971234567\n"],"names":["registerFormSchema","Yup","shape","name","required","matches","nameRegExp","max","email","password","passwordRegExp","registerFormInputs","inputName","type","id","nanoid","label","placeholder","Wrapper","FormContainer","Form","FormTitle","Svg","Button","GooseIMG","defaultValues","getDefaultValues","RegisterForm","useRegisterUserMutation","register","isError","error","useEffect","notify","data","message","useForm","resolver","yupResolver","reg","handleSubmit","reset","errors","formState","onSubmit","autoComplete","map","input","width","height","href","sprite","AuthNavigate","route","ROUTES","content","srcset","GooseRegister","GooseRegisterRetina","src","alt","RegisterPage","to","arr","reduce","acc","item","RegExp","phoneRegExp"],"sourceRoot":""}