{"version":3,"file":"static/js/828.ce64d105.chunk.js","mappings":"kOAOaA,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAKjB,OACE,0BACE,mBAAQC,QANc,WACxBF,GAASG,EAAAA,EAAAA,MACV,EAIG,UACE,gBAAKC,MAAM,KAAKC,OAAO,KAAvB,UACE,gBAAKC,KAAI,UAAKC,EAAAA,EAAL,qBAKlB,E,mBCpBYC,EAAWC,EAAAA,EAAAA,KAAH,uCACV,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,IAAhB,ICEHC,EAAW,WACtB,OACE,4BACE,SAACL,EAAD,oBACA,gBAAKF,KAAK,IAAIQ,IAAI,OAGvB,ECFYC,EAAS,WACpB,OACE,iCACE,0BACE,qDAEF,SAAChB,EAAD,KACA,SAACc,EAAD,MAGL,E,UClBYG,EAAMP,EAAAA,EAAAA,IAAH,sM,UCMHQ,EAAY,WACvB,OAAiBC,EAAAA,EAAAA,MAAVC,GAAP,eAIA,OACE,0BACE,mBAAQC,KAAK,SAASlB,QAJL,kBAAMiB,GAAN,EAIjB,UACE,SAACH,EAAD,CAAKZ,MAAM,KAAKC,OAAO,KAAvB,UACE,gBAAKC,KAAI,UAAKC,EAAAA,EAAL,wBAKlB,E,UChBYc,EAAU,WACrB,OACE,+BAEE,4BACE,SAAC,KAAD,CAASC,GAAG,WAAZ,yBACA,SAAC,KAAD,CAASA,GAAG,YAAZ,0BAIP,E,UCRYC,EAAU,WACrB,OACE,iCACE,4BACA,gBAAKnB,MAAM,KAAKoB,IAAKC,EAAAA,EAAOX,IAAI,WAChC,yCACA,6CAEA,SAACO,EAAD,KACA,SAACJ,EAAD,MAGL,E,UCVc,SAASS,IACtB,OACE,iCACE,yCACA,SAACX,EAAD,KACA,SAACQ,EAAD,KACA,SAAC,KAAD,MAGL,C","sources":["modules/Header/components/ThemeToggler/ThemeToggler.jsx","modules/Header/components/UserInfo/UserInfo.styled.jsx","modules/Header/components/UserInfo/UserInfo.jsx","modules/Header/Header.jsx","modules/SideBar/components/LogoutBtn/LogoutBtn.styled.jsx","modules/SideBar/components/LogoutBtn/LogoutBtn.jsx","modules/SideBar/components/UserNav/UserNav.jsx","modules/SideBar/SideBar.jsx","pages/MainLayout/MainLayout.jsx"],"sourcesContent":["// \"1. Компонент відображає елемент для зміни значення теми зі світлої на темну та навпаки\r\n// 2. Початкове значення теми - світла\r\n// 3. Обрана тема записується в localStorage та використовується як активна при вході користувача в його обліковий запис\"\r\nimport sprite from 'shared/icons/sprite.svg';\r\nimport { toggleTheme } from 'redux/theme/operations';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport const ThemeToggler = () => {\r\n  const dispatch = useDispatch();\r\n  const handleThemeChange = () => {\r\n    dispatch(toggleTheme());\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleThemeChange}>\r\n        <svg width=\"26\" height=\"26\">\r\n          <use href={`${sprite}#icon-moon`} />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const UserName = styled.span`\r\n  color: ${props => props.theme.text};\r\n`;\r\n","// \"1. Компонент підписаний на глобальний стейт з якого отримує ім'я користувача та url з фото користувача\r\n// 2. Компонент відображає ім'я користувача та його зображення/аватар.\r\n// 3. Якщо зображення відсутнє на його місці повинна відображатись перша буква імені в верхньому регістрі\"\r\nimport { UserName } from './UserInfo.styled';\r\n\r\nexport const UserInfo = () => {\r\n  return (\r\n    <div>\r\n      <UserName>Name</UserName>\r\n      <img href=\"#\" alt=\"\" />\r\n    </div>\r\n  );\r\n};\r\n","// \"1. Компонент використовує визначає активну сторінку і використовує відповідне значення заголовку з назвою даної сторінки.\r\n// 2. На планшетній та мобільній версіях відображається кнопка для відкриття бургер меню.\r\n// 3. На сторінціз календарем дня, при наявності не виконаних завдань в цей день, відображається Гусак з мотиваційним повідомленням, так як показано на макеті.\r\n// 4. Компонент рендерить:\r\n//  - ThemeToggler - перемикач теми світла/темна\r\n//  - UserInfo - блок з інфо про юзера\"\r\n\r\nimport { ThemeToggler } from './components/ThemeToggler/ThemeToggler';\r\nimport { UserInfo } from './components/UserInfo/UserInfo';\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <h1>Use Profile/ Calendar</h1>\r\n      </div>\r\n      <ThemeToggler />\r\n      <UserInfo />\r\n    </>\r\n  );\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Svg = styled.svg`\r\n  fill: transparent;\r\n  stroke: #000000;\r\n  transition: stroke 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n/* \r\n  &:hover,\r\n  &:focus {\r\n    stroke: rgba(17, 17, 17, 0.1);\r\n  } */\r\n`;\r\n","// \"1. Компонент рендерить кнопку.\r\n// 2. Клік по кнопці виконує запит на бекенд який видаляє активну сесію користувача.\r\n// 3. Успішна відповідь переводить користувача в статус неавторизованого, змінюючи відповідне поле в глобальному сетейті, а також обнуляє всі данні авторизованого користувача  в глобальному стейті.\r\n// 4. Відповідь з помилкою виводить відповідне пуш-повідомлення, і вилогінює користуваача на клієнті, як і в попередньому пункті.\"\r\nimport sprite from 'shared/icons/sprite.svg';\r\nimport { Svg } from './LogoutBtn.styled';\r\nimport { useLazyLogoutUserQuery } from 'redux/auth/authApi';\r\n\r\nexport const LogoutBtn = () => {\r\n  const [logout] = useLazyLogoutUserQuery();\r\n\r\n  const handleLogout = () => logout();\r\n\r\n  return (\r\n    <div>\r\n      <button type=\"button\" onClick={handleLogout}>\r\n        <Svg width=\"20\" height=\"20\">\r\n          <use href={`${sprite}#icon-log-out`} />\r\n        </Svg>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","// \"Компонент  в собі містить блок список елементів навігації за наступними маршрутами:\r\n//  - /account - редіректить на AccountPage\r\n//  - /calendar - редіректить на CalendarPage з модулем календаря місяця.\"\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const UserNav = () => {\r\n  return (\r\n    <>\r\n      \r\n      <nav>\r\n        <NavLink to=\"/account\">My account</NavLink>\r\n        <NavLink to=\"/calendar\">Calendar</NavLink>\r\n      </nav>\r\n    </>\r\n  );\r\n};\r\n","// \"Модуль рендерить в собі компоненти:\r\n//  - UserNav - блок основної навігації\r\n//  - LogoutBtn - виходу з облікового запису\"\r\n\r\nimport { LogoutBtn } from './components/LogoutBtn/LogoutBtn';\r\nimport { UserNav } from './components/UserNav/UserNav';\r\nimport goose from 'shared/icons/goose.svg';\r\n\r\nexport const SideBar = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n      <img width=\"71\" src={goose} alt=\"goose\"/> \r\n      <h2>Goose Track</h2>\r\n      <span>User Panel</span>\r\n      </div>\r\n      <UserNav />\r\n      <LogoutBtn />\r\n    </>\r\n  );\r\n};\r\n","// \"1. Сторінка повинна відображатись відповідно до макету на 3х розширеннях (375, 768, 1440), на ширині екрану до 375 блоки розмітки повинні тягнутись\r\n// 2. Компонент здійснює запит по данні користувача(email, name, id та т.і.), якщо під час рендеру компоненту ці данні відсутні в глобальному стейті\r\n// 3. Комопонент рендерить:\r\n//  - Header - модуль що відображається на всіх сторінках авторизованого юзера. Показує загальну інформацію та допоміжний інтерфейс роботи з обліковим записом.\r\n//  - SideBar - модуль що відображається на всіх сторінках авторизованого юзера, на планшеті та мобілці знаходиться в бургер-меню. Показує навігацію між сторінками та кнопку виходу з облікового запису. \"\r\n\r\nimport { Header } from 'modules/Header/Header';\r\nimport { SideBar } from 'modules/SideBar/SideBar';\r\nimport { Outlet } from 'react-router-dom';\r\n\r\nexport default function MainLayout() {\r\n  return (\r\n    <>\r\n      <div>MainLayout</div>\r\n      <Header />\r\n      <SideBar />\r\n      <Outlet />\r\n    </>\r\n  );\r\n}\r\n"],"names":["ThemeToggler","dispatch","useDispatch","onClick","toggleTheme","width","height","href","sprite","UserName","styled","props","theme","text","UserInfo","alt","Header","Svg","LogoutBtn","useLazyLogoutUserQuery","logout","type","UserNav","to","SideBar","src","goose","MainLayout"],"sourceRoot":""}