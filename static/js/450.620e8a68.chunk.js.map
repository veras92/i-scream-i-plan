{"version":3,"file":"static/js/450.620e8a68.chunk.js","mappings":"mUAAA,SAASA,EAAQC,GAAmV,OAAtOD,EAArD,oBAAXE,QAAoD,kBAApBA,OAAOC,SAAmC,SAAiBF,GAAO,cAAcA,CAAM,EAAqB,SAAiBA,GAAO,OAAOA,GAAyB,oBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,CAAM,EAAWD,EAAQC,EAAO,CA8C3W,SAASK,EAAIC,EAAMC,GAEhC,IADAC,EAAAA,EAAAA,GAAa,EAAGC,YACXF,GAAkC,WAAtBR,EAAQQ,GAAwB,OAAO,IAAIG,KAAKC,KACjE,IAAIC,EAAQL,EAASK,OAAQC,EAAAA,EAAAA,GAAUN,EAASK,OAAS,EACrDE,EAASP,EAASO,QAASD,EAAAA,EAAAA,GAAUN,EAASO,QAAU,EACxDC,EAAQR,EAASQ,OAAQF,EAAAA,EAAAA,GAAUN,EAASQ,OAAS,EACrDC,EAAOT,EAASS,MAAOH,EAAAA,EAAAA,GAAUN,EAASS,MAAQ,EAClDC,EAAQV,EAASU,OAAQJ,EAAAA,EAAAA,GAAUN,EAASU,OAAS,EACrDC,EAAUX,EAASW,SAAUL,EAAAA,EAAAA,GAAUN,EAASW,SAAW,EAC3DC,EAAUZ,EAASY,SAAUN,EAAAA,EAAAA,GAAUN,EAASY,SAAW,EAE3DC,GAAoBC,EAAAA,EAAAA,SAAUf,EAAMQ,EAAiB,GAARF,GAE7CU,GAAkBC,EAAAA,EAAAA,SAAQH,EAAmBJ,EAAe,EAARD,GAEpDS,EAAeN,EAAkB,GAARD,EACzBQ,EAAeN,EAAyB,GAAfK,EACzBE,EAAyB,IAAfD,EACVE,EAAY,IAAIjB,KAAKY,EAAgBM,UAAYF,GACrD,OAAOC,CACR,C,gCCzDYE,EAAkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1BC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,MAEXC,GAAiBC,EAAAA,EAAAA,IAAYC,EAAAA,GAE7B/B,GAAOgC,EAAAA,EAAAA,SAAMH,EAAgB,aAAczB,KAAK6B,OAEhDC,EAAe,SAAAC,GACnB,GAA6B,aAAzBA,EAAEC,cAAcC,KAAqB,CACvC,GAAa,QAATb,EAAgB,CAClB,IAAMc,GAAUC,EAAAA,EAAAA,GAAIvC,EAAM,CAAEU,KAAM,IAC5B8B,GAAmBC,EAAAA,EAAAA,SAAOH,EAAS,cAGzC,OAFAb,GAASiB,EAAAA,EAAAA,GAASF,SAClBb,EAAS,GAAD,OAAIH,EAAJ,YAAYgB,GAErB,CACD,IAAMF,GAAUC,EAAAA,EAAAA,GAAIvC,EAAM,CAAEQ,OAAQ,IAC9BgC,GAAmBC,EAAAA,EAAAA,SAAOH,EAAS,cAGzC,OAFAb,GAASiB,EAAAA,EAAAA,GAASF,SAClBb,EAAS,GAAD,OAAIH,EAAJ,YAAYgB,GAErB,CACD,GAAa,QAAThB,EAAgB,CAClB,IAAMc,EAAUvC,EAAIC,EAAM,CAAEU,KAAM,IAC5B8B,GAAmBC,EAAAA,EAAAA,SAAOH,EAAS,cAGzC,OAFAb,GAASiB,EAAAA,EAAAA,GAASF,SAClBb,EAAS,GAAD,OAAIH,EAAJ,YAAYgB,GAErB,CACD,IAAMF,EAAUvC,EAAIC,EAAM,CAAEQ,OAAQ,IAC9BgC,GAAmBC,EAAAA,EAAAA,SAAOH,EAAS,cACzCb,GAASiB,EAAAA,EAAAA,GAASF,IAClBb,EAAS,GAAD,OAAIH,EAAJ,YAAYgB,GAErB,EAEKG,GAAcF,EAAAA,EAAAA,SAAOzC,EAAM,gBAE3B4C,EAAgB5C,EAAOI,KAAK6B,MAElC,OACE,iCACE,uBAAa,UAATT,EAAmBmB,EAAYE,MAAM,GAAKF,KAC9C,2BACE,mBACA,2BACE,mBACEnB,KAAK,SACLa,KAAK,cACLS,QAASZ,EACTa,SAAUH,EAJZ,UAME,0BACE,gBAAKI,KAAI,UAAKC,EAAAA,EAAL,iCAGb,mBAAQzB,KAAK,SAASa,KAAK,WAAWS,QAASZ,EAA/C,UACE,0BACE,gBAAKc,KAAI,UAAKC,EAAAA,EAAL,yCAOtB,E,UChEYC,EAAmB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC3BnD,GAAO8B,EAAAA,EAAAA,IAAYC,EAAAA,GAEzB,OACE,2BACE,yBACE,SAAC,KAAD,CAASqB,GAAE,gBAAWpD,GAAQ8C,QAAS,kBAAMK,EAAa,QAAnB,EAAvC,sBAIF,yBACE,SAAC,KAAD,CAASC,GAAE,cAASpD,GAAQ8C,QAAS,kBAAMK,EAAa,MAAnB,EAArC,qBAMP,ECZYE,EAAkB,WAC7B,OAAwBC,EAAAA,EAAAA,UAAS,SAAjC,eAAO9B,EAAP,KAAa+B,EAAb,KAEM1B,GAAiBC,EAAAA,EAAAA,IAAYC,EAAAA,GAE7B/B,GAAOgC,EAAAA,EAAAA,SAAMH,EAAgB,aAAczB,KAAK6B,OAEhDR,GAAWC,EAAAA,EAAAA,MAET8B,GAASC,EAAAA,EAAAA,IAAwB,CACvCC,MAAMjB,EAAAA,EAAAA,SAAOzC,EAAM,QACnB2D,OAAOlB,EAAAA,EAAAA,SAAOzC,EAAM,QAFdwD,KASR,OAJAI,EAAAA,EAAAA,YAAU,WACRnC,GAASoC,EAAAA,EAAAA,GAASL,GACnB,GAAE,CAAC/B,EAAU+B,KAGZ,iCACE,SAACjC,EAAD,CAAiBC,KAAMA,KACvB,SAAC0B,EAAD,CAAkBC,aAAcI,MAGrC,E,UCvBc,SAASO,IACtB,OACE,4BACE,SAACC,EAAA,EAAD,WACE,0CAFJ,gBAKE,SAACV,EAAD,KAKA,SAAC,EAAAW,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,QAIP,C,sGCbc,SAAShD,EAAQiD,EAAWC,IACzCjE,EAAAA,EAAAA,GAAa,EAAGC,WAChB,IAAIiE,GAAS7D,EAAAA,EAAAA,GAAU4D,GACvB,OAAOE,EAAAA,EAAAA,SAAQH,GAAYE,EAC5B,C,sGCJc,SAASrD,EAAUmD,EAAWC,IAC3CjE,EAAAA,EAAAA,GAAa,EAAGC,WAChB,IAAIiE,GAAS7D,EAAAA,EAAAA,GAAU4D,GACvB,OAAOG,EAAAA,EAAAA,SAAUJ,GAAYE,EAC9B,C","sources":["../node_modules/date-fns/esm/sub/index.js","modules/CalendarToolbar/components/PeriodPaginator/PeriodPaginator.jsx","modules/CalendarToolbar/components/PeriodTypeSelect/PeriodTypeSelect.jsx","modules/CalendarToolbar/CalendarToolbar.jsx","pages/CalendarPage/CalendarPage.jsx","../node_modules/date-fns/esm/subDays/index.js","../node_modules/date-fns/esm/subMonths/index.js"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport subDays from \"../subDays/index.js\";\nimport subMonths from \"../subMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name sub\n * @category Common Helpers\n * @summary Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @description\n * Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be subtracted\n *\n * | Key     | Description                        |\n * |---------|------------------------------------|\n * | years   | Amount of years to be subtracted   |\n * | months  | Amount of months to be subtracted  |\n * | weeks   | Amount of weeks to be subtracted   |\n * | days    | Amount of days to be subtracted    |\n * | hours   | Amount of hours to be subtracted   |\n * | minutes | Amount of minutes to be subtracted |\n * | seconds | Amount of seconds to be subtracted |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract the following duration from 15 June 2017 15:29:20\n * const result = sub(new Date(2017, 5, 15, 15, 29, 20), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> Mon Sep 1 2014 10:19:50\n */\n\nexport default function sub(date, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || _typeof(duration) !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0; // Subtract years and months\n\n  var dateWithoutMonths = subMonths(date, months + years * 12); // Subtract weeks and days\n\n  var dateWithoutDays = subDays(dateWithoutMonths, days + weeks * 7); // Subtract hours, minutes and seconds\n\n  var minutestoSub = minutes + hours * 60;\n  var secondstoSub = seconds + minutestoSub * 60;\n  var mstoSub = secondstoSub * 1000;\n  var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);\n  return finalDate;\n}","// \"1. Компонент рендерить блок навігації для переадресацї юзера на таблицю з задачами відповідно до обраного типу періоду day | month.\r\n// 2. Кнопка що вказує поточний тип обраного періоду має активні стилі, як показано на макеті.\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { format, parse, add, sub } from 'date-fns';\r\nimport { setDates } from 'redux/date/dateSlice';\r\nimport { selectDate } from 'redux/date/selectors';\r\nimport sprite from 'shared/icons/sprite.svg';\r\n\r\nexport const PeriodPaginator = ({ type }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const normalizedDate = useSelector(selectDate);\r\n\r\n  const date = parse(normalizedDate, 'yyyy-MM-dd', Date.now());\r\n\r\n  const onChangeDate = e => {\r\n    if (e.currentTarget.name === 'addition') {\r\n      if (type === 'day') {\r\n        const newDate = add(date, { days: 1 });\r\n        const formattedNewDate = format(newDate, 'yyyy-MM-dd');\r\n        dispatch(setDates(formattedNewDate));\r\n        navigate(`${type}/${formattedNewDate}`);\r\n        return;\r\n      }\r\n      const newDate = add(date, { months: 1 });\r\n      const formattedNewDate = format(newDate, 'yyyy-MM-dd');\r\n      dispatch(setDates(formattedNewDate));\r\n      navigate(`${type}/${formattedNewDate}`);\r\n      return;\r\n    }\r\n    if (type === 'day') {\r\n      const newDate = sub(date, { days: 1 });\r\n      const formattedNewDate = format(newDate, 'yyyy-MM-dd');\r\n      dispatch(setDates(formattedNewDate));\r\n      navigate(`${type}/${formattedNewDate}`);\r\n      return;\r\n    }\r\n    const newDate = sub(date, { months: 1 });\r\n    const formattedNewDate = format(newDate, 'yyyy-MM-dd');\r\n    dispatch(setDates(formattedNewDate));\r\n    navigate(`${type}/${formattedNewDate}`);\r\n    return;\r\n  };\r\n\r\n  const currentDate = format(date, 'dd MMMM yyyy');\r\n\r\n  const shouldDisable = date < Date.now();\r\n\r\n  return (\r\n    <>\r\n      <p>{type === 'month' ? currentDate.slice(3) : currentDate}</p>\r\n      <ul>\r\n        <li></li>\r\n        <li>\r\n          <button\r\n            type=\"button\"\r\n            name=\"subtraction\"\r\n            onClick={onChangeDate}\r\n            disabled={shouldDisable}\r\n          >\r\n            <svg>\r\n              <use href={`${sprite}#icon-smoll-arrow-left`} />\r\n            </svg>\r\n          </button>\r\n          <button type=\"button\" name=\"addition\" onClick={onChangeDate}>\r\n            <svg>\r\n              <use href={`${sprite}#icon-smoll-arrow-right`} />\r\n            </svg>\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n","// \"1. Компонент отримує в пропсах дату, тип періоду та метод для зміни дати.\r\n// 2. Компонент рендерить розмітку з відформатованим періодом дат в залежності від обраних дати та періоду та блок з кнопками для зміни дати, що збільшують або зменшують період до наступного/попереднього відповідно.\r\n// 3. Клік по кнопках змінює дату в залежності від типу періоду:\r\n//  - month - залишає число поточного дня місяця змінюючи місяць/рік попереднього/наступного місяця\r\n//  - day - змінює дату поточного дня  на дату попереднього/наступного дня\r\n// 4. Компонент форматує період:\r\n//  - month - MARCH 2023\r\n//  - day - 6 MARCH 2023\"\r\nimport { useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { selectDate } from 'redux/date/selectors';\r\n\r\nexport const PeriodTypeSelect = ({ onChangeType }) => {\r\n  const date = useSelector(selectDate);\r\n\r\n  return (\r\n    <ul>\r\n      <li>\r\n        <NavLink to={`month/${date}`} onClick={() => onChangeType('month')}>\r\n          Month\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to={`day/${date}`} onClick={() => onChangeType('day')}>\r\n          Day\r\n        </NavLink>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n","// \"1. Компонент рендерить:\r\n//  - PeriodPaginator - дозволяє юзеру змінити дату періоду, задачі за який він хоче подивитись.\r\n//  - PeriodTypeSelect - дозволяє юзеру змінити тип періоду, задачі за який він хоче подивитись.\r\n// 2. Компонент отримує тип періоду, та має локальний стейт з датою.\r\n// При зміні дати або типу періоду відбуваеться запит на отримання задач за обраний період, якщо задач з даного періоду досі немає в глобальному стейті.\r\n// Успіх - дані пишуться в глобальний стейт\r\n// Помилка - виводиться відповідне пуш повідомлення.\"\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { format, parse } from 'date-fns';\r\nimport { useGetTasksByMonthQuery } from 'redux/tasks/tasksApi';\r\nimport { setTasks } from 'redux/tasks/tasksSlice';\r\nimport { selectDate } from 'redux/date/selectors';\r\nimport { PeriodPaginator } from './components/PeriodPaginator/PeriodPaginator';\r\nimport { PeriodTypeSelect } from './components/PeriodTypeSelect/PeriodTypeSelect';\r\n\r\nexport const CalendarToolbar = () => {\r\n  const [type, setType] = useState('month');\r\n\r\n  const normalizedDate = useSelector(selectDate);\r\n\r\n  const date = parse(normalizedDate, 'yyyy-MM-dd', Date.now());\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { data } = useGetTasksByMonthQuery({\r\n    year: format(date, 'yyyy'),\r\n    month: format(date, 'MM'),\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(setTasks(data));\r\n  }, [dispatch, data]);\r\n\r\n  return (\r\n    <>\r\n      <PeriodPaginator type={type} />\r\n      <PeriodTypeSelect onChangeType={setType} />\r\n    </>\r\n  );\r\n};\r\n","// \"1. Компонент рендериться на маршрут /calendar.\r\n// 2. При першому вході на сторінку компонент виконує переадресацію на розширений маршрут /calendar/month/:currentDate для відображення календяря місяця\r\n// 3. На сторінці знаходиться модуль CalendarToolbar - з яким користувач може обрати тип періоду, та його інтервал\r\n// 4. На сторінці відображаеться один з модулів періоду дат календаря:\r\n//  - ChoosedMonth - дозволяє подивитись всі задачі на місяць, перейти на сторінку одного дня ChoosedDay.\r\n//  - ChoosedDay - дозволяє створювати задачі та розділити ці задачі  на групи по ступеню їх виконання.\r\n// 5. При новому відвідуванні додатку та першому вході на сторінку відображаеться модуль ChoosedMonth з розкладкою комірок з датами поточного місяця.\r\n// 6. На сторінці повинен здійснюватись запит за завданнями, якщо вони відсутні в глобальному стейті\r\n// 7. Успіх - данні записуються у відповідний стейт\r\n// 8. Помилка - користувачу показується відповідне пушповідомлення\"\r\n\r\nimport { CalendarToolbar } from 'modules/CalendarToolbar/CalendarToolbar';\r\nimport { Suspense } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n// import { ChoosedDay } from 'modules/ChoosedDay/ChoosedDay';\r\n// import { ChoosedMonth } from 'modules/ChoosedMonth/ChoosedMonth';\r\nimport { Outlet } from 'react-router-dom';\r\n\r\nexport default function CalendarPage() {\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>Calendar</title>\r\n      </Helmet>\r\n      CalendarPage\r\n      <CalendarToolbar />\r\n      {/* ці компоненти виніс в app треба з'ясувати чи правильно це, але зараз працює */}\r\n      {/* <ChoosedMonth /> */}\r\n      {/* <ChoosedDay /> */}\r\n      {/* ================================================================= */}\r\n      <Suspense fallback={null}>\r\n        <Outlet />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n","import addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\n\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","sub","date","duration","requiredArgs","arguments","Date","NaN","years","toInteger","months","weeks","days","hours","minutes","seconds","dateWithoutMonths","subMonths","dateWithoutDays","subDays","minutestoSub","secondstoSub","mstoSub","finalDate","getTime","PeriodPaginator","type","dispatch","useDispatch","navigate","useNavigate","normalizedDate","useSelector","selectDate","parse","now","onChangeDate","e","currentTarget","name","newDate","add","formattedNewDate","format","setDates","currentDate","shouldDisable","slice","onClick","disabled","href","sprite","PeriodTypeSelect","onChangeType","to","CalendarToolbar","useState","setType","data","useGetTasksByMonthQuery","year","month","useEffect","setTasks","CalendarPage","Helmet","Suspense","fallback","dirtyDate","dirtyAmount","amount","addDays","addMonths"],"sourceRoot":""}