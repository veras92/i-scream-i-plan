{"version":3,"file":"static/js/145.48aebe0e.chunk.js","mappings":"+NAIaA,EAAY,SAAC,GAOnB,ICXoBC,EDKzBC,EAMI,EANJA,GACAC,EAKI,EALJA,UACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,SAEI,EADJC,OAEA,OACE,4BACE,kBAAOC,QAASN,EAAhB,UCdqBD,EDcWE,ECb7BF,EAAOQ,OAAO,GAAGC,cAAgBT,EAAOU,MAAM,ODcjD,0BAAOT,GAAIA,EAAIE,KAAMA,GAAUC,EAASF,EAAW,CAAEG,SAAAA,QAI1D,E,SEjBYM,EAAqB,CAChC,CACET,UAAW,OACXC,KAAM,OACNF,IAAIW,EAAAA,EAAAA,MACJP,UAAU,GAEZ,CACEH,UAAW,QACXC,KAAM,QACNF,IAAIW,EAAAA,EAAAA,MACJP,UAAU,GAEZ,CACEH,UAAW,WACXC,KAAM,WACNF,IAAIW,EAAAA,EAAAA,MACJP,UAAU,ICLRQ,EAAiCF,ECbjCG,QACF,SAACC,EAAKC,GAAN,eAAC,UACID,GADL,cAEGC,EAAKd,UAAY,IAFpB,GAIA,CAAC,GDUQe,EAAe,WAC1B,OAKIC,EAAAA,EAAAA,IAAQ,CAEVL,cAAAA,IANUM,EADZ,EACEf,SACAgB,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaf,EAJf,EAIEgB,UAAahB,OAWf,OACE,kBAAMiB,SAAUH,GAND,SAAAI,GACfC,QAAQC,IAAIF,GACZH,GACD,IAGC,UACGV,EAAmBgB,KAAI,SAAAC,GAAK,OAC3B,SAAC7B,GAAD,kBAA8B6B,GAA9B,IAAqCxB,SAAUe,EAAKb,OAAQA,IAA5CsB,EAAM3B,GADK,KAG7B,mBAAQE,KAAK,SAAb,uBAGL,E,SE/Bc,SAAS0B,IACtB,OACE,iCACE,2CACA,SAACZ,EAAD,KACA,SAACa,EAAA,EAAD,IAHF,MAMH,C,mECZYA,EAAe,SAAC,GAAuB,EAArBC,MAAqB,EAAdC,QACpC,OACE,+BACE,2CAIL,C","sources":["shared/components/FormFiled/FormField.jsx","shared/utils/capitalize.js","modules/RegisterForm/registerFormInputs.js","modules/RegisterForm/RegisterForm.jsx","shared/utils/getDefaultValues.js","pages/RegisterPage/RegisterPage.jsx","shared/components/AuthNavigate/AuthNavigate.jsx"],"sourcesContent":["import { capitalize } from 'shared/utils/capitalize';\nimport PropTypes from 'prop-types';\n// import { ErrorMessage } from '@hookform/error-message';\n\nexport const FormFiled = ({\n  id,\n  inputName,\n  type,\n  register,\n  required,\n  errors,\n}) => {\n  return (\n    <div>\n      <label htmlFor={id}>{capitalize(inputName)}</label>\n      <input id={id} type={type} {...register(inputName, { required })} />\n      {/* <ErrorMessage errors={errors} name={inputName} /> */}\n    </div>\n  );\n};\n\nFormFiled.propTypes = {\n  inputName: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  register: PropTypes.func.isRequired,\n  required: PropTypes.bool.isRequired,\n  errors: PropTypes.any.isRequired,\n};\n","export function capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n","import { nanoid } from '@reduxjs/toolkit';\n\nexport const registerFormInputs = [\n  {\n    inputName: 'name',\n    type: 'text',\n    id: nanoid(),\n    required: true,\n  },\n  {\n    inputName: 'email',\n    type: 'email',\n    id: nanoid(),\n    required: true,\n  },\n  {\n    inputName: 'password',\n    type: 'password',\n    id: nanoid(),\n    required: true,\n  },\n];\n","// \"1. Компонент створює блок розмітки з формою та інпутами: name, email, password і кнопкою відправки форми.\r\n// 2. Інпути повинні бути реалізовані як контрольовані компоненти за допомогою бібліотеки formik/hook form\r\n// 3. По сабміту поля форми повинні проходити валідацію, (бібліотека yup) і в разі, негативного результату під відповітним інпутом підсвітити повідомлення помилки валідації.\r\n// 4. В разі успішної відповіді інформацію про користувача потрібно записати в глобальний стейт і виконати редірект на приватний маршрут /calendar/month.\r\n// 5. В разі помилки користувачу потрібно вивести відповідне пуш-повідомлення з помилкою\"\r\n\r\nimport { useForm } from 'react-hook-form';\r\n// import { yupResolver } from '@hookform/resolvers/yup';\r\n// import { registerRormSchema } from './registerFormSchema';\r\nimport { getDefaultValues } from 'shared/utils/getDefaultValues';\r\n\r\nimport { FormFiled } from 'shared/components/FormFiled/FormField';\r\nimport { registerFormInputs } from './registerFormInputs';\r\n\r\nconst defaultValues = getDefaultValues(registerFormInputs);\r\n\r\nexport const RegisterForm = () => {\r\n  const {\r\n    register: reg,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    // resolver: yupResolver(registerRormSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const onSubmit = data => {\r\n    console.log(data);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      {registerFormInputs.map(input => (\r\n        <FormFiled key={input.id} {...input} register={reg} errors={errors} />\r\n      ))}\r\n      <button type=\"submit\">Sign up</button>\r\n    </form>\r\n  );\r\n};\r\n","export const getDefaultValues = arr =>\n  arr.reduce(\n    (acc, item) => ({\n      ...acc,\n      [item.inputName]: '',\n    }),\n    {}\n  );\n","// \"Компонент рендериться на маршрут /register\r\n\r\n// 1. Сторінка повинна відображатись відповідно до макету на 3х розширеннях (375, 768, 1440), на ширині екрану до 375 блоки розмітки повинні тягнутись\r\n// 2. Сторінка рендерить компоненти:\r\n//  - RegisterForm - блок з формою реєстрації\r\n//  - AuthNavigate - загальний компонент навігації для сторінок login/register\"\r\nimport { RegisterForm } from 'modules/RegisterForm/RegisterForm';\r\nimport { AuthNavigate } from 'shared/components/AuthNavigate/AuthNavigate';\r\n\r\nexport default function RegisterPage() {\r\n  return (\r\n    <>\r\n      <div>RegisterPage</div>\r\n      <RegisterForm />\r\n      <AuthNavigate />;\r\n    </>\r\n  );\r\n}\r\n","// \"1. Компонент отримує пропсами маршрут для редіректу та текстовий контент\r\n// 2. Рендерить елемент навігації з відповідними налаштуваннями для редіректу на сторінки LoginPage/RegisterPage\"\r\n\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport const AuthNavigate = ({ route, content }) => {\r\n  return (\r\n    <>\r\n      <div>AuthNavigate</div>\r\n      {/* <Link to={route}>{content}</Link> */}\r\n    </>\r\n  );\r\n};\r\n"],"names":["FormFiled","string","id","inputName","type","register","required","errors","htmlFor","charAt","toUpperCase","slice","registerFormInputs","nanoid","defaultValues","reduce","acc","item","RegisterForm","useForm","reg","handleSubmit","reset","formState","onSubmit","data","console","log","map","input","RegisterPage","AuthNavigate","route","content"],"sourceRoot":""}