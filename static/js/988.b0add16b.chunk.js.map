{"version":3,"file":"static/js/988.b0add16b.chunk.js","mappings":"kPAEaA,EAAkBC,EAAAA,KAAaC,MAAM,CAChDC,MAAOF,EAAAA,KACJE,MAAM,wBACNC,SAAS,0BACZC,SAAUJ,EAAAA,KAAaG,SAAS,4B,8BCJrBE,EAAkB,CAC7B,CACEC,UAAW,QACXC,KAAM,QACNC,IAAIC,EAAAA,EAAAA,MACJC,MAAO,QACPP,UAAU,EACVQ,YAAa,eAEf,CACEL,UAAW,WACXC,KAAM,WACNC,IAAIC,EAAAA,EAAAA,MACJC,MAAO,WACPP,UAAU,EACVQ,YAAa,mB,6JCfV,IAAMC,GAAO,wjBAuBPC,GAAa,ybAgCbC,GAAI,6OAiBJC,GAAS,mRAcTC,GAAG,oVAoBHC,GAAM,8XAsBPD,EAtBO,gFA2BNE,GAAQ,kL,SCtGfC,GAAgBC,EAAAA,EAAAA,GAAiBf,GAE1BgB,EAAY,WACvB,OAAgBC,EAAAA,EAAAA,MAATC,GAAP,eAEA,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAY3B,GACtBoB,cAAAA,IANUQ,EADZ,EACEC,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAWf,OACE,SAACnB,EAAD,WACE,UAACC,EAAD,YACE,UAACC,EAAD,CAAMmB,SAAUJ,GARL,SAAAK,GACfX,EAAMW,GACNJ,GACD,IAK6CK,aAAa,QAArD,WACE,SAACpB,EAAD,qBACCV,EAAgB+B,KAAI,SAAAC,GAAK,OACxB,SAAC,KAAD,kBAEMA,GAFN,IAGET,SAAUD,EACVI,OAAQA,IAHHM,EAAM7B,GAFW,KAQ1B,UAACS,EAAD,CAAQV,KAAK,SAAb,WACE,sCACA,SAACS,EAAD,CAAKsB,MAAM,KAAKC,OAAO,KAAvB,UACE,gBAAKC,KAAI,UAAKC,EAAAA,EAAL,2BAIf,SAACC,EAAA,EAAD,CAAcC,MAAOC,EAAAA,GAAAA,SAAiBC,QAAQ,aAC9C,SAAC3B,EAAD,CACE4B,OAAM,UAAKC,EAAL,gBAAwBC,EAAxB,OACNC,IAAG,UAAKF,GACRG,IAAI,cAKb,E,UCzEc,SAASC,IACtB,OACE,4BACE,SAACC,EAAA,EAAD,WACE,yCAEF,SAAC/B,EAAD,MAGL,C,8ECbYqB,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOE,EAAV,EAAUA,QAAV,OAC1B,SAAC,KAAD,CAAMQ,GAAIV,EAAV,SAAkBE,GADQ,C,sGCHfS,EAAQC,EAAAA,EAAAA,MAAH,iOAWP,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,aAAhB,IAGHC,EAAQJ,EAAAA,EAAAA,MAAH,sUACI,SAAAC,GAAK,OAAIA,EAAMC,MAAMG,UAAhB,IAEL,SAAAJ,GAAK,OAAIA,EAAMC,MAAMI,QAAhB,IAcd,SAAAL,GAAK,OAAIA,EAAMC,MAAMK,IAAhB,I,SC5BLC,EAAY,SAAC,GASnB,IARLvD,EAQI,EARJA,GACAF,EAOI,EAPJA,UACAC,EAMI,EANJA,KACAI,EAKI,EALJA,YACAD,EAII,EAJJA,MACAkB,EAGI,EAHJA,SACAzB,EAEI,EAFJA,SACA4B,EACI,EADJA,OAEA,OACE,4BACE,SAACuB,EAAD,CAAOU,QAASxD,EAAhB,SAAqBE,KACrB,SAACiD,GAAD,QACEnD,GAAIA,EACJD,KAAMA,EACNI,YAAaA,GACTiB,EAAStB,EAAW,CAAEH,SAAAA,OAE5B,SAAC,IAAD,CAAc4B,OAAQA,EAAQkC,KAAM3D,MAGzC,C,+EC3BYc,EAAmB,SAAA8C,GAAG,OACjCA,EAAIC,QACF,SAACC,EAAKC,GAAN,eAAC,UACID,GADL,cAEGC,EAAK/D,UAAY,IAFpB,GAIA,CAAC,EAN8B,C","sources":["modules/LoginForm/loginFormSchema.js","modules/LoginForm/loginFormInputs.js","modules/LoginForm/LoginForm.styled.jsx","modules/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","shared/components/AuthNavigate/AuthNavigate.jsx","shared/components/FormFiled/FormField.styled.jsx","shared/components/FormFiled/FormField.jsx","shared/utils/getDefaultValues.js"],"sourcesContent":["import * as Yup from 'yup';\n\nexport const loginRormSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Invalid email format')\n    .required('This field is required'),\n  password: Yup.string().required('This field is required'),\n});\n","import { nanoid } from '@reduxjs/toolkit';\n\nexport const loginFormInputs = [\n  {\n    inputName: 'email',\n    type: 'email',\n    id: nanoid(),\n    label: 'Email',\n    required: true,\n    placeholder: 'Enter email',\n  },\n  {\n    inputName: 'password',\n    type: 'password',\n    id: nanoid(),\n    label: 'Password',\n    required: true,\n    placeholder: 'Enter password',\n  },\n];\n","import styled from '@emotion/styled/macro';\r\n\r\nexport const Wrapper = styled.div`\r\n  height: 100vh;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  padding: 1.25rem;\r\n\r\n  background-color: #dcebf7;\r\n\r\n  @media screen and (min-width: 1200px) {\r\n    background: url(../../shared/images/GooseImg/goose-rocket/goose-rocket.png),\r\n      url(), #dcebf7;\r\n    background-repeat: no-repeat;\r\n    background-position-x: calc(50% + (480px / 2) + (368px / 2) + 52px),\r\n      calc(50% + (480px / 2) + (207px / 2) + 156px);\r\n    background-position-y: calc(50% + 212px - 66px),\r\n      calc(50% + 212px - 66px - (717px / 2) + (174px / 2) + 76px);\r\n  }\r\n`;\r\n\r\nexport const FormContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  width: 100%;\r\n  max-width: 480px;\r\n\r\n  & > a {\r\n    position: relative;\r\n    display: block;\r\n    font-family: 'Inter';\r\n    font-style: normal;\r\n    font-weight: 600;\r\n    font-size: 0.75rem;\r\n    line-height: 0.875rem;\r\n    color: var(--main-blue-color);\r\n\r\n    &:before {\r\n      position: absolute;\r\n      bottom: 0;\r\n      left: 0;\r\n\r\n      content: '';\r\n      width: 100%;\r\n      height: 1px;\r\n      background-color: var(--main-blue-color);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 24px;\r\n  width: 100%;\r\n\r\n  padding: 40px 24px;\r\n  margin-bottom: 1.125rem;\r\n\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n\r\n  @media (min-width: 576px) {\r\n    padding: 40px;\r\n  }\r\n`;\r\n\r\nexport const FormTitle = styled.div`\r\n  font-family: 'Inter';\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 1.125rem;\r\n  line-height: 1.5rem;\r\n\r\n  color: #3e85f3;\r\n  text-shadow: 0px 47px 355px rgba(0, 0, 0, 0.07),\r\n    0px 9.4px 57.6875px rgba(0, 0, 0, 0.035);\r\n\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nexport const Svg = styled.svg`\r\n  fill: transparent;\r\n  stroke: #ffffff;\r\n\r\n  @keyframes scale-up-hor-left {\r\n    0% {\r\n      -webkit-transform: scaleX(0.4);\r\n      transform: scaleX(0.4);\r\n      -webkit-transform-origin: 0% 0%;\r\n      transform-origin: 0% 0%;\r\n    }\r\n    100% {\r\n      -webkit-transform: scaleX(1);\r\n      transform: scaleX(1);\r\n      -webkit-transform-origin: 0% 0%;\r\n      transform-origin: 0% 0%;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  column-gap: 0.8125rem;\r\n  padding: 14px;\r\n  margin-top: 0.5rem;\r\n\r\n  background: #3e85f3;\r\n  box-shadow: 4px 2px 16px rgba(136, 165, 191, 0.48);\r\n  border-radius: 16px;\r\n\r\n  border: none;\r\n\r\n  font-family: 'Inter';\r\n  font-style: normal;\r\n  font-weight: 600;\r\n  font-size: 0.875rem;\r\n  line-height: 1.125rem;\r\n  letter-spacing: -0.02em;\r\n  color: #fff;\r\n\r\n  &:hover ${Svg} {\r\n    animation: scale-up-hor-left 0.7s cubic-bezier(0.39, 0.575, 0.565, 1) both;\r\n  }\r\n`;\r\n\r\nexport const GooseIMG = styled.img`\r\n  display: none;\r\n\r\n  @media (min-width: 1120px) {\r\n    position: fixed;\r\n    width: 368px;\r\n    height: 521px;\r\n    right: 20px;\r\n    bottom: 20px;\r\n    display: block;\r\n  }\r\n`;\r\n","// \"1. Компонент створює блок розмітки з формою та інпутами: email, password і кнопкою відправки форми.\r\n// 2. Інпути повинні бути реалізовані як контрольовані компоненти за допомогою бібліотеки formik/hook-form\r\n// 3. По сабміту поля форми повинні проходити валідацію, (бібліотека yup) і в разі, негативного результату під відповітним інпутом підсвітити повідомлення помилки валідації.\r\n// 4. В разі успішної відповіді інформацію про користувача потрібно записати в глобальний стейт і виконати редірект на приватний маршрут /calendar/month.\r\n// 5. В разі помилки користувачу потрібно вивести відповідне пуш-повідомлення з помилкою\"\r\n\r\nimport { useLoginUserMutation } from 'redux/auth/authApi';\r\n\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { loginRormSchema } from './loginFormSchema';\r\nimport { getDefaultValues } from 'shared/utils/getDefaultValues';\r\n\r\nimport { FormFiled } from 'shared/components/FormFiled/FormField';\r\nimport { loginFormInputs } from './loginFormInputs';\r\n\r\nimport { AuthNavigate } from 'shared/components/AuthNavigate/AuthNavigate';\r\nimport { ROUTES } from 'shared/services/routes';\r\n\r\nimport sprite from 'shared/icons/sprite.svg';\r\nimport GooseRocket from 'shared/images/GooseImg/goose-login/goose-login.png';\r\nimport GooseRocketRetina from 'shared/images/GooseImg/goose-login/@2x/goose-login@2x.png';\r\n\r\nimport {\r\n  Svg,\r\n  Wrapper,\r\n  FormContainer,\r\n  Form,\r\n  FormTitle,\r\n  Button,\r\n  GooseIMG,\r\n} from './LoginForm.styled';\r\n\r\nconst defaultValues = getDefaultValues(loginFormInputs);\r\n\r\nexport const LoginForm = () => {\r\n  const [login] = useLoginUserMutation();\r\n\r\n  const {\r\n    register: reg,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(loginRormSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const onSubmit = data => {\r\n    login(data);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <FormContainer>\r\n        <Form onSubmit={handleSubmit(onSubmit)} autoComplete=\"false\">\r\n          <FormTitle>Log In</FormTitle>\r\n          {loginFormInputs.map(input => (\r\n            <FormFiled\r\n              key={input.id}\r\n              {...input}\r\n              register={reg}\r\n              errors={errors}\r\n            />\r\n          ))}\r\n          <Button type=\"submit\">\r\n            <span>Log in</span>\r\n            <Svg width=\"20\" height=\"20\">\r\n              <use href={`${sprite}#icon-Log-in`} />\r\n            </Svg>\r\n          </Button>\r\n        </Form>\r\n        <AuthNavigate route={ROUTES.register} content=\"Sign Up\" />\r\n        <GooseIMG\r\n          srcset={`${GooseRocket} 1x, ${GooseRocketRetina} 2x`}\r\n          src={`${GooseRocket}`}\r\n          alt=\"goose\"\r\n        />\r\n      </FormContainer>\r\n    </Wrapper>\r\n  );\r\n};\r\n","// \"Компонент рендериться на маршрут /login\r\n\r\n// 1. Сторінка повинна відображатись відповідно до макету на 3х розширеннях (375, 768, 1440), на ширині екрану до 375 блоки розмітки повинні тягнутись\r\n// 2. Сторінка рендерить компоненти:\r\n//  - LoginForm - блок з формою логінізації\r\n//  - AuthNavigate - загальний компонент навігації для сторінок login/register\"\"\"\r\nimport { LoginForm } from 'modules/LoginForm/LoginForm';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nexport default function LoginPage() {\r\n  return (\r\n    <div>\r\n      <Helmet>\r\n        <title>Log in</title>\r\n      </Helmet>\r\n      <LoginForm />\r\n    </div>\r\n  );\r\n}\r\n","// \"1. Компонент отримує пропсами маршрут для редіректу та текстовий контент\r\n// 2. Рендерить елемент навігації з відповідними налаштуваннями для редіректу на сторінки LoginPage/RegisterPage\"\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AuthNavigate = ({ route, content }) => (\r\n  <Link to={route}>{content}</Link>\r\n);\r\n\r\nAuthNavigate.propTypes = {\r\n  route: PropTypes.string.isRequired,\r\n  content: PropTypes.any.isRequired,\r\n};\r\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 0.5rem;\n\n  font-family: 'Inter';\n  font-style: normal;\n  font-weight: 600;\n  font-size: 12px;\n  line-height: 15px;\n\n  color: ${props => props.theme.textSecondary};\n`;\n\nexport const Input = styled.input`\n  background-color: ${props => props.theme.bcgTernary};\n  outline: none;\n  border: 1px solid ${props => props.theme.disabled};\n  border-radius: 8px;\n\n  padding: 0.875rem;\n\n  width: 100%;\n\n  &::placeholder {\n    font-family: 'Inter';\n    font-style: normal;\n    font-weight: 400;\n    font-size: 16px;\n    line-height: 18px;\n\n    color: ${props => props.theme.text};\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ErrorMessage } from '@hookform/error-message';\n\nimport { Label, Input } from './FormField.styled';\n\nexport const FormFiled = ({\n  id,\n  inputName,\n  type,\n  placeholder,\n  label,\n  register,\n  required,\n  errors,\n}) => {\n  return (\n    <div>\n      <Label htmlFor={id}>{label}</Label>\n      <Input\n        id={id}\n        type={type}\n        placeholder={placeholder}\n        {...register(inputName, { required })}\n      />\n      <ErrorMessage errors={errors} name={inputName} />\n    </div>\n  );\n};\n\nFormFiled.propTypes = {\n  id: PropTypes.string.isRequired,\n  inputName: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  register: PropTypes.func.isRequired,\n  required: PropTypes.bool.isRequired,\n  errors: PropTypes.any.isRequired,\n};\n","export const getDefaultValues = arr =>\n  arr.reduce(\n    (acc, item) => ({\n      ...acc,\n      [item.inputName]: '',\n    }),\n    {}\n  );\n"],"names":["loginRormSchema","Yup","shape","email","required","password","loginFormInputs","inputName","type","id","nanoid","label","placeholder","Wrapper","FormContainer","Form","FormTitle","Svg","Button","GooseIMG","defaultValues","getDefaultValues","LoginForm","useLoginUserMutation","login","useForm","resolver","yupResolver","reg","register","handleSubmit","reset","errors","formState","onSubmit","data","autoComplete","map","input","width","height","href","sprite","AuthNavigate","route","ROUTES","content","srcset","GooseRocket","GooseRocketRetina","src","alt","LoginPage","Helmet","to","Label","styled","props","theme","textSecondary","Input","bcgTernary","disabled","text","FormFiled","htmlFor","name","arr","reduce","acc","item"],"sourceRoot":""}